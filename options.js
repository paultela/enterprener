// Generated by CoffeeScript 1.6.1
(function() {
  var Word, add, edit, empty, events, find, finish, list, load, makeRow, refresh, save, undefine, update, words;

  words = [];

  Word = function() {
    return {
      search: ''
    };
  };

  load = function(dict) {
    var word, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = dict.length; _i < _len; _i++) {
      word = dict[_i];
      _results.push(add(word));
    }
    return _results;
  };

  find = function(term) {
    var i, _i, _ref;
    for (i = _i = 0, _ref = words.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (words[i].search === term) {
        return i;
      }
    }
    return -1;
  };

  add = function(word) {
    if (find(word.search) >= 0) {
      throw "'" + word.search + "' is already in the dictionary";
    }
    words.push(word);
    return $('#dictionary').append(events(makeRow(Word())));
  };

  list = function() {
    var word, _results;
    _results = [];
    for (word in words) {
      _results.push(console.log('%s: %o', word, words[word]));
    }
    return _results;
  };

  makeRow = function(word) {
    var a, i, input, td, tr;
    tr = $('<tr class="word">');
    tr.data('word', word.search);
    td = $('<td class="word-search">');
    input = $('<input type="text" placeholder="Correct this..." />');
    input.val(word.search);
    tr.append(td.append(input));
    td = $('<td class="word-correct">');
    input = $('<input type="text" placeholder="...to this" />');
    input.val(word.correct);
    tr.append(td.append(input));
    td = $('<td>');
    a = $('<a class="btn-remove" href="" tabindex="-1"></a>');
    i = $('<i class="icon-remove"></i>');
    tr.append(td.append(a.append(i)));
    return tr;
  };

  empty = function(row) {
    if ($(row).find('.word-search input').val().length) {
      console.log('Not empty');
      return false;
    }
    console.log('Empty');
    return true;
  };

  refresh = function() {
    var tbody, word, _i, _len;
    tbody = $('#dictionary');
    tbody.empty();
    for (_i = 0, _len = words.length; _i < _len; _i++) {
      word = words[_i];
      tbody.append(makeRow(word));
    }
    tbody.append(makeRow(Word()));
    return $.each($('.word'), function(i, word) {
      return events(word);
    });
  };

  events = function(row) {
    var inputs;
    inputs = $(row).find('input');
    inputs.on('click focus', function() {
      return edit(row);
    });
    inputs.on('blur', function() {
      finish(row);
      if (!empty(row)) {
        update(row);
      }
      return $(row).data('word', $(row).find('.word-search input').val());
    });
    $(row).find('.btn-remove').on('click', function(event) {
      event.preventDefault();
      if (!empty(row)) {
        return undefine(row);
      }
    });
    return row;
  };

  save = function() {
    return chrome.storage.sync.set({
      dictionary: words
    });
  };

  undefine = function(row) {
    console.log('Deleting "%s"', $(row).data('word'));
    $(row).remove();
    words.splice(find($(row).data('word')), 1);
    save();
    return row;
  };

  edit = function(row) {
    console.log('Editing "%s"', $(row).data('word'));
    $(row).addClass('editing');
    return row;
  };

  finish = function(row) {
    console.log('Finishing "%s"', $(row).data('word'));
    $(row).removeClass('editing');
    return row;
  };

  update = function(row) {
    var entry, word;
    console.log('Saving "%s"', $(row).data('word'));
    word = {
      search: $(row).find('.word-search input').val(),
      correct: $(row).find('.word-correct input').val()
    };
    if (!word.search) {
      return row;
    }
    entry = find($(row).data('word'));
    if (entry >= 0) {
      words[entry] = word;
    } else {
      add(word);
    }
    save();
    return row;
  };

  chrome.storage.sync.get(function(res) {
    load(res.dictionary);
    return refresh();
  });

}).call(this);
